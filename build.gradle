plugins {
    id "net.neoforged.gradle.common"
}

project.group = "com.communi-suggestu.saecularia-caudices"
project.version = (System.getenv().containsKey("Version") ? System.getenv("Version") : project.localVersion)

subprojects { Project subProject ->
    subProject.apply { configure ->
        configure.plugin("idea")
        configure.plugin("java")
        configure.plugin("java-library")
        configure.plugin("maven-publish")
    }

    subProject.repositories.mavenLocal()
    subProject.repositories.mavenCentral()
    subProject.repositories.maven {
        name 'LDTTeam - Modding'
        url 'https://ldtteam.jfrog.io/ldtteam/modding/'
    }

    subProject.group = rootProject.group
    subProject.version = rootProject.version
    subProject.archivesBaseName = "${rootProject.name}-${subProject.name}"

    subProject.java.toolchain.languageVersion.set(JavaLanguageVersion.of(project.javaVersion))

    subProject.tasks.jar.archiveBaseName = "${rootProject.name}-${subProject.name}"
    subProject.tasks.jar.manifest.attributes([
                    "Specification-Title"     : rootProject.name,
                    "Specification-Vendor"    : rootProject.projectOwner,
                    "Specification-Version"   : rootProject.version,
                    "Implementation-Title"    : subProject.name,
                    "Implementation-Version"  : subProject.version,
                    "Implementation-Vendor"   : subProject.projectOwner,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    "Automatic-Module-Name"   : rootProject.name.toLowerCase().replace("-", "_"),
                    "FMLModType": "GAMELIBRARY"
            ])
    subProject.tasks.jar.duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    if (System.getenv().containsKey("LDTTeamJfrogUsername") && System.getenv().containsKey("LDTTeamJfrogPassword")) {
        subProject.publishing.repositories.maven {
            name 'LDTTeamJfrog'
            credentials.username System.getenv().get("LDTTeamJfrogUsername")
            credentials.password System.getenv().get("LDTTeamJfrogPassword")
            url 'https://ldtteam.jfrog.io/ldtteam/mods-maven'
        }
    }

    subProject.publishing.repositories.maven {
        name 'InternalDirectory'
        url 'file://' + rootProject.file('repo').getAbsolutePath()
    }

    subProject.dependencies.compileOnly "org.jetbrains:annotations:${project.jetbrainsAnnotationsVersion}"
    subProject.dependencies.testCompileOnly "org.jetbrains:annotations:${project.jetbrainsAnnotationsVersion}"

    subProject.ext.disableCompiling = {
        subProject.tasks.build.enabled = false
        subProject.tasks.jar.enabled = false
        subProject.tasks.assemble.enabled = false
        subProject.tasks.test.enabled = false
    }

    subProject.ext.setupEmbeddedPublishing = { mavenPublication ->
        subProject.afterEvaluate { evaluatedSubProject ->
            if (evaluatedSubProject.getPlugins().hasPlugin("net.neoforged.gradle.userdev")) {
                evaluatedSubProject.jarJar.component(mavenPublication)
            }
        }
    }

    subProject.ext.addCoreProject = {

        Project coreProject = subProject.project(":core");

        subProject.dependencies.api (coreProject) {
            exclude group: 'net.minecraft', module: 'joined'
        }

        if (subProject.getPlugins().hasPlugin("net.neoforged.gradle.userdev")) {
            subProject.jarJar.enable()

            subProject.dependencies.jarJar (coreProject) {
                jarJar.ranged(it, "[${coreProject.version}]")
                jarJar.pin(it, coreProject.version)
                exclude group: 'net.minecraft', module: 'joined'
            }
        }
        else if (subProject.getPlugins().hasPlugin("fabric-loom") && subProject.ext.remapTaskClass != null) {
            Provider<File> fmjFile = subProject.layout.buildDirectory.dir("fabric-meta-generation").map {it.dir("core") }
                    .map { it.file("fabric.mod.json") }
                    .map { RegularFile file -> {
                        def targetFile = file.asFile;
                        File parentDir = targetFile.parentFile;
                        parentDir.mkdirs();

                        targetFile.newWriter().withWriter { w -> w << """
                            {
                              "schemaVersion": 1,
                              "id": "${coreProject.group.replace(".", "_")}_${coreProject.name}",
                              "version": "${coreProject.version}",
                              "name": "${coreProject.name}",
                              "custom": {
                                "fabric-loom:generated": true
                              }
                            }
                        """.trim() }

                        return file
                    }}


            def remapCommonJarTask = subProject.tasks.register('remapCoreJar', subProject.ext.remapTaskClass) {
                input = subProject.project(':core').tasks.jar.archiveFile
                archiveClassifier = 'core-fabric'
                from(fmjFile)
            }

            subProject.remapJar {
                nestedJars.from(remapCommonJarTask.get().archiveFile)
            }
        }
    }

    subProject.ext.getAllSupportedMcVersionsAsStringArray = {
        if (subProject.additionalMinecraftVersions == "") {
            return "${subProject.minecraftVersion}"
        }

        return "${subProject.minecraftVersion}\", \"${subProject.additionalMinecraftVersions.split(",").join("\", \"")}"
    }

    subProject.ext.getSupportedVersionRange = {
        if (subProject.additionalMinecraftVersions == "") {
            return "[${subProject.minecraftVersion}]"
        }

        return "[${subProject.additionalMinecraftVersions.split(",")[0]}, ${subProject.minecraftVersion}]"
    }

    subProject.ext.setupEmbeddedPublishing = { mavenPublication ->
        subProject.afterEvaluate { evaluatedSubProject ->
            if (evaluatedSubProject.getPlugins().hasPlugin("net.neoforged.gradle.userdev")) {
                evaluatedSubProject.jarJar.component(mavenPublication)
            }
        }
    }

    subProject.tasks.withType(GenerateModuleMetadata.class).configureEach {
        enabled = false
    }

    subProject.publishing {
        publications {
            mavenJava(MavenPublication) { pub ->
                artifactId "${rootProject.name}-${subProject.name}"

                from subProject.components.java

                pom {
                    url = subProject.githubUrl
                    licenses {
                        license {
                            name = 'GNU GENERAL PUBLIC LICENSE Version 3'
                            url = 'https://www.gnu.org/licenses/gpl-3.0.en.html'
                        }
                    }
                    developers {
                        developer {
                            id = 'OrionDevelopment'
                            name = 'Marc Hermans'
                            email = 'marc.hermans@ldtteam.com'
                        }
                    }
                    scm {
                        connection = subProject.gitUrl
                        developerConnection = subProject.gitConnectUrl
                        url = subProject.projectUrl
                    }
                }

                subProject.setupEmbeddedPublishing(pub)
            }
        }
    }
}
